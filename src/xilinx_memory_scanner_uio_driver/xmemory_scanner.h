// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XMEMORY_SCANNER_H
#define XMEMORY_SCANNER_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xmemory_scanner_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XMemory_scanner_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XMemory_scanner;

typedef struct {
    u32 word_0;
    u32 word_1;
    u32 word_2;
    u32 word_3;
} XMemory_scanner_Search_string_v;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XMemory_scanner_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XMemory_scanner_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XMemory_scanner_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XMemory_scanner_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XMemory_scanner_Initialize(XMemory_scanner *InstancePtr, u16 DeviceId);
XMemory_scanner_Config* XMemory_scanner_LookupConfig(u16 DeviceId);
int XMemory_scanner_CfgInitialize(XMemory_scanner *InstancePtr, XMemory_scanner_Config *ConfigPtr);
#else
int XMemory_scanner_Initialize(XMemory_scanner *InstancePtr, const char* InstanceName);
int XMemory_scanner_Release(XMemory_scanner *InstancePtr);
#endif

void XMemory_scanner_Start(XMemory_scanner *InstancePtr);
u32 XMemory_scanner_IsDone(XMemory_scanner *InstancePtr);
u32 XMemory_scanner_IsIdle(XMemory_scanner *InstancePtr);
u32 XMemory_scanner_IsReady(XMemory_scanner *InstancePtr);
void XMemory_scanner_EnableAutoRestart(XMemory_scanner *InstancePtr);
void XMemory_scanner_DisableAutoRestart(XMemory_scanner *InstancePtr);
u32 XMemory_scanner_Get_return(XMemory_scanner *InstancePtr);

void XMemory_scanner_Set_search_string_V(XMemory_scanner *InstancePtr, XMemory_scanner_Search_string_v Data);
XMemory_scanner_Search_string_v XMemory_scanner_Get_search_string_V(XMemory_scanner *InstancePtr);
void XMemory_scanner_Set_search_string_V_vld(XMemory_scanner *InstancePtr);
u32 XMemory_scanner_Get_search_string_V_vld(XMemory_scanner *InstancePtr);
u32 XMemory_scanner_Get_count_out(XMemory_scanner *InstancePtr);
u32 XMemory_scanner_Get_count_out_vld(XMemory_scanner *InstancePtr);

void XMemory_scanner_InterruptGlobalEnable(XMemory_scanner *InstancePtr);
void XMemory_scanner_InterruptGlobalDisable(XMemory_scanner *InstancePtr);
void XMemory_scanner_InterruptEnable(XMemory_scanner *InstancePtr, u32 Mask);
void XMemory_scanner_InterruptDisable(XMemory_scanner *InstancePtr, u32 Mask);
void XMemory_scanner_InterruptClear(XMemory_scanner *InstancePtr, u32 Mask);
u32 XMemory_scanner_InterruptGetEnabled(XMemory_scanner *InstancePtr);
u32 XMemory_scanner_InterruptGetStatus(XMemory_scanner *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
