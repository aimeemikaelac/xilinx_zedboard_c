// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XCREC_H
#define XCREC_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xcrec_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XCrec_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XCrec;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XCrec_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XCrec_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XCrec_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XCrec_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XCrec_Initialize(XCrec *InstancePtr, u16 DeviceId);
XCrec_Config* XCrec_LookupConfig(u16 DeviceId);
int XCrec_CfgInitialize(XCrec *InstancePtr, XCrec_Config *ConfigPtr);
#else
int XCrec_Initialize(XCrec *InstancePtr, const char* InstanceName);
int XCrec_Release(XCrec *InstancePtr);
#endif

void XCrec_Start(XCrec *InstancePtr);
u32 XCrec_IsDone(XCrec *InstancePtr);
u32 XCrec_IsIdle(XCrec *InstancePtr);
u32 XCrec_IsReady(XCrec *InstancePtr);
void XCrec_EnableAutoRestart(XCrec *InstancePtr);
void XCrec_DisableAutoRestart(XCrec *InstancePtr);

void XCrec_Set_din_i_V(XCrec *InstancePtr, u32 Data);
u32 XCrec_Get_din_i_V(XCrec *InstancePtr);
void XCrec_Set_din_q_V(XCrec *InstancePtr, u32 Data);
u32 XCrec_Get_din_q_V(XCrec *InstancePtr);
u32 XCrec_Get_dout_mix_i_V(XCrec *InstancePtr);
u32 XCrec_Get_dout_mix_q_V(XCrec *InstancePtr);
void XCrec_Set_ph_in_i_V(XCrec *InstancePtr, u32 Data);
u32 XCrec_Get_ph_in_i_V(XCrec *InstancePtr);
void XCrec_Set_ph_in_q_V(XCrec *InstancePtr, u32 Data);
u32 XCrec_Get_ph_in_q_V(XCrec *InstancePtr);
u32 XCrec_Get_ph_out_i_V(XCrec *InstancePtr);
u32 XCrec_Get_ph_out_q_V(XCrec *InstancePtr);
u32 XCrec_Get_loop_integ_V(XCrec *InstancePtr);
void XCrec_Set_control_qam_V(XCrec *InstancePtr, u32 Data);
u32 XCrec_Get_control_qam_V(XCrec *InstancePtr);
void XCrec_Set_control_lf_p(XCrec *InstancePtr, u32 Data);
u32 XCrec_Get_control_lf_p(XCrec *InstancePtr);
void XCrec_Set_control_lf_i(XCrec *InstancePtr, u32 Data);
u32 XCrec_Get_control_lf_i(XCrec *InstancePtr);
void XCrec_Set_control_lf_out_gain(XCrec *InstancePtr, u32 Data);
u32 XCrec_Get_control_lf_out_gain(XCrec *InstancePtr);
void XCrec_Set_control_reg_clr(XCrec *InstancePtr, u32 Data);
u32 XCrec_Get_control_reg_clr(XCrec *InstancePtr);
void XCrec_Set_control_reg_init_V(XCrec *InstancePtr, u32 Data);
u32 XCrec_Get_control_reg_init_V(XCrec *InstancePtr);

void XCrec_InterruptGlobalEnable(XCrec *InstancePtr);
void XCrec_InterruptGlobalDisable(XCrec *InstancePtr);
void XCrec_InterruptEnable(XCrec *InstancePtr, u32 Mask);
void XCrec_InterruptDisable(XCrec *InstancePtr, u32 Mask);
void XCrec_InterruptClear(XCrec *InstancePtr, u32 Mask);
u32 XCrec_InterruptGetEnabled(XCrec *InstancePtr);
u32 XCrec_InterruptGetStatus(XCrec *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
