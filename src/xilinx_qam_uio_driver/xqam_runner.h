// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XQAM_RUNNER_H
#define XQAM_RUNNER_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xqam_runner_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XQam_runner_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XQam_runner;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XQam_runner_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XQam_runner_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XQam_runner_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XQam_runner_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XQam_runner_Initialize(XQam_runner *InstancePtr, u16 DeviceId);
XQam_runner_Config* XQam_runner_LookupConfig(u16 DeviceId);
int XQam_runner_CfgInitialize(XQam_runner *InstancePtr, XQam_runner_Config *ConfigPtr);
#else
int XQam_runner_Initialize(XQam_runner *InstancePtr, const char* InstanceName);
int XQam_runner_Release(XQam_runner *InstancePtr);
#endif

void XQam_runner_Start(XQam_runner *InstancePtr);
u32 XQam_runner_IsDone(XQam_runner *InstancePtr);
u32 XQam_runner_IsIdle(XQam_runner *InstancePtr);
u32 XQam_runner_IsReady(XQam_runner *InstancePtr);
void XQam_runner_EnableAutoRestart(XQam_runner *InstancePtr);
void XQam_runner_DisableAutoRestart(XQam_runner *InstancePtr);
u32 XQam_runner_Get_return(XQam_runner *InstancePtr);

void XQam_runner_Set_sourceAddress(XQam_runner *InstancePtr, u32 Data);
u32 XQam_runner_Get_sourceAddress(XQam_runner *InstancePtr);
void XQam_runner_Set_sourceAddress_vld(XQam_runner *InstancePtr);
u32 XQam_runner_Get_sourceAddress_vld(XQam_runner *InstancePtr);
void XQam_runner_Set_destinationAddress(XQam_runner *InstancePtr, u32 Data);
u32 XQam_runner_Get_destinationAddress(XQam_runner *InstancePtr);
void XQam_runner_Set_destinationAddress_vld(XQam_runner *InstancePtr);
u32 XQam_runner_Get_destinationAddress_vld(XQam_runner *InstancePtr);
void XQam_runner_Set_iterations(XQam_runner *InstancePtr, u32 Data);
u32 XQam_runner_Get_iterations(XQam_runner *InstancePtr);
void XQam_runner_Set_iterations_vld(XQam_runner *InstancePtr);
u32 XQam_runner_Get_iterations_vld(XQam_runner *InstancePtr);
void XQam_runner_Set_control_in_qam(XQam_runner *InstancePtr, u32 Data);
u32 XQam_runner_Get_control_in_qam(XQam_runner *InstancePtr);
void XQam_runner_Set_control_in_qam_vld(XQam_runner *InstancePtr);
u32 XQam_runner_Get_control_in_qam_vld(XQam_runner *InstancePtr);
void XQam_runner_Set_control_in_lf_p(XQam_runner *InstancePtr, u32 Data);
u32 XQam_runner_Get_control_in_lf_p(XQam_runner *InstancePtr);
void XQam_runner_Set_control_in_lf_p_vld(XQam_runner *InstancePtr);
u32 XQam_runner_Get_control_in_lf_p_vld(XQam_runner *InstancePtr);
void XQam_runner_Set_control_in_lf_i(XQam_runner *InstancePtr, u32 Data);
u32 XQam_runner_Get_control_in_lf_i(XQam_runner *InstancePtr);
void XQam_runner_Set_control_in_lf_i_vld(XQam_runner *InstancePtr);
u32 XQam_runner_Get_control_in_lf_i_vld(XQam_runner *InstancePtr);
void XQam_runner_Set_control_in_lf_out_gain(XQam_runner *InstancePtr, u32 Data);
u32 XQam_runner_Get_control_in_lf_out_gain(XQam_runner *InstancePtr);
void XQam_runner_Set_control_in_lf_out_gain_vld(XQam_runner *InstancePtr);
u32 XQam_runner_Get_control_in_lf_out_gain_vld(XQam_runner *InstancePtr);
void XQam_runner_Set_control_in_reg_clr(XQam_runner *InstancePtr, u32 Data);
u32 XQam_runner_Get_control_in_reg_clr(XQam_runner *InstancePtr);
void XQam_runner_Set_control_in_reg_clr_vld(XQam_runner *InstancePtr);
u32 XQam_runner_Get_control_in_reg_clr_vld(XQam_runner *InstancePtr);
void XQam_runner_Set_control_in_reg_init(XQam_runner *InstancePtr, u32 Data);
u32 XQam_runner_Get_control_in_reg_init(XQam_runner *InstancePtr);
void XQam_runner_Set_control_in_reg_init_vld(XQam_runner *InstancePtr);
u32 XQam_runner_Get_control_in_reg_init_vld(XQam_runner *InstancePtr);

void XQam_runner_InterruptGlobalEnable(XQam_runner *InstancePtr);
void XQam_runner_InterruptGlobalDisable(XQam_runner *InstancePtr);
void XQam_runner_InterruptEnable(XQam_runner *InstancePtr, u32 Mask);
void XQam_runner_InterruptDisable(XQam_runner *InstancePtr, u32 Mask);
void XQam_runner_InterruptClear(XQam_runner *InstancePtr, u32 Mask);
u32 XQam_runner_InterruptGetEnabled(XQam_runner *InstancePtr);
u32 XQam_runner_InterruptGetStatus(XQam_runner *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
